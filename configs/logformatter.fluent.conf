## Format and re-tag logs

# Parse log element to json
<filter application.**>
  @type parser
  key_name "log"
  hash_value_field "log"
  reserve_data true
  <parse>
    @type json
  </parse> 
</filter>

# Enrich log data
<filter application.**>
  @type record_transformer
  enable_ruby true
  <record>
    level ${record["log"]["Level"]}
    eventTime ${record["log"]["CreateTime"]}
    host.name ${record["log"]["MachineName"]}
    host.type "?"
    host.image.version "?"
    net.host.ip ${record["log"]["MachineIpAddress"]}
    userName  ${record["log"]["UserName"]}
    service.name ${tag_parts[1]}
    log.source ${record["source"]}
    id  ${record["log"]["UniqueId"]}
    appId ${tag_parts[3]}
    environment ${tag_parts[2]}
    message ${record["log"]["Message"]}
    machineName "#{Socket.gethostname}"
    dt.code.filepath ${record["log"]["CallerInfo"]}
    dt.code.lineno ${record["log"]["LineNumber"]}
    dt.code.func ${record["log"]["FunctionName"]}
    dt.code.ns ${record["log"]["Namespace"]}
    container.name ${record["container_name"]}
  </record>
</filter>

# Remove unnecessary keys
<filter application.**>
  @type record_transformer
  enable_ruby true
  remove_keys container_name,container_id,source,log
</filter>

# Rewrite tags based on log level
<match application.**>
  @type rewrite_tag_filter
  <rule>
    key level
    pattern /\w*(info)\w*|\w*(warn)\w*|\w*(error)\w*/gi
    tag dynatrace.${tag}
  </rule>
  <rule>
    key level
    pattern /\w*(audit)\w*/gi
    tag splunk.${tag}
  </rule>
</match>

